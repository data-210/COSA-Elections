leaflet(data=map_data) %>%
addTiles() %>%
setView(lng = -98.4936,
lat = 29.4241,
zoom = 11) %>%
# City Council Districts
addPolygons(
data = districts,
color = 'black',
weight = 6,
opacity = 2,
fillColor = 'white',
#fillColor =  ~district_palette(District),
fillOpacity = 0.5,
label = ~District,
labelOptions = labelOptions(noHide = TRUE)
) %>%
# Precincts with mayoral results
addPolygons(
color = 'black',
weight = 0.5,
opacity = 0.8,
fillColor = ~WinnerColor,
fillOpacity = 1,
popup = ~paste(
"<strong>Precinct:</strong>", NAME, "<br><br>",
"<strong>Winning Candidate:</strong> ", Winner, "<br>",
"<strong>Max Vote Share:</strong> ", round(MaxVoteShare, 1), "%", "<br><br>",
"<strong>All Results:</strong><br>", Results
),
highlight=highlightOptions(
color = 'red',
weight = 2,
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~NAME,
labelOptions = labelOptions(
style = list('color' = 'black', 'font-weight'='bold',
'background-color' = 'white',
'padding' = '5px',
'border-radius'= '3px',
'box-shadow' = '3px 3px rgba(0,0,0,0.25'),
textOnly = TRUE,
direction = 'right',
opacity = 0.9
),
options = pathOptions(
cursor = 'pointer'
)
) %>%
addLegend(
"bottomright",
pal = winner_palette_mayor,
values = unique(filteredMayorData()$Winner),
title = "Winning Candidate",
opacity = 1
)
})
# Render Council Map
observe({
print("Filtered Council Data:")
print(filteredCouncilData())
})
output$councilMap <- renderLeaflet({
# Join filtered data with precinct shapefile
map_data_council <- precincts %>%
left_join(filteredCouncilData(), by=c("NAME" = "Precinct"))%>%
mutate(
District.x = as.numeric(District.x),
District.y = as.numeric(District.y),
District = coalesce(District.x, District.y)) %>%
select(-District.x, District.y) %>%
filter(!is.na(WinnerColor))
print("Map Data for Council:")
print(head(map_data_council))
print(names(map_data_council))
# Ensure District column exists
if (!"District" %in% names(map_data_council)) {
stop("District column missing in map_data_council after the join!")
}
leaflet(data = map_data_council) %>%
addTiles() %>%
setView(lng = -98.4936,
lat = 29.4241,
zoom = 11) %>%
# City Council Districts
addPolygons(
data = districts,
color = 'black',
weight = 6,
opacity = 2,
fillColor = 'white',
#fillColor =  ~district_palette(District),
fillOpacity = 1,
label = ~District,
labelOptions = labelOptions(noHide = TRUE)
) %>%
# Precincts with council results
addPolygons(
color = 'black',
weight = 0.5,
opacity = 0.8,
fillColor = ~WinnerColor,
fillOpacity = 0.7,
popup = ~paste(
"<strong>District:</strong>", District, "<br>",
"<strong>Precinct:</strong>", NAME, "<br><br>",
"<strong>Winning Candidate:</strong> ", Winner, "<br>",
"<strong>Max Vote Share:</strong> ", round(MaxVoteShare, 1), "%", "<br><br>",
"<strong>All Results:</strong><br>", Results
),
highlight=highlightOptions(
color = 'red',
weight = 2,
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~NAME,
labelOptions = labelOptions(
style = list('color' = 'black', 'font-weight'='bold',
'background-color' = 'white',
'padding' = '5px',
'border-radius'= '3px',
'box-shadow' = '3px 3px rgba(0,0,0,0.25'),
textOnly = TRUE,
direction = 'right',
opacity = 0.9
),
options = pathOptions(
cursor = 'pointer'
)
) %>%
addLegend(
"bottomright",
pal = winner_palette,
values = unique(filteredCouncilData()$Winner),
title = "Winning Candidates",
opacity = 1
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
## Server ##
server <- function(input, output, session) {
# Reactive data for Mayor's map
filteredMayorData <- reactive({
data <- mayor_results %>%
filter(ElectionYear == input$electionYear)
if (input$mayorDistrict != "All") {
valid_precincts <- precincts %>%
filter(District == as.numeric(input$mayorDistrict)) %>%
pull(NAME)
data <- data %>%
filter(Precinct %in% valid_precincts)
}
data
})
# Reactive data for Council map
filteredCouncilData <- reactive({
council_data <- council_results %>%
filter(ElectionYear == input$electionYear)
if (input$councilDistrict != "All") {
council_data <- council_data %>%
filter(District == as.numeric(input$councilDistrict))
}
council_data
})
observe({
print("Filtered Council Data:")
print(filteredCouncilData())
})
# Render Mayoral Map
output$mayorMap <- renderLeaflet({
# Join filtered data with precinct shapefile
map_data <- precincts %>%
left_join(filteredMayorData(), by=c("NAME" = "Precinct"))%>%
filter(!is.na(WinnerColor))
leaflet(data=map_data) %>%
addTiles() %>%
setView(lng = -98.4936,
lat = 29.4241,
zoom = 11) %>%
# City Council Districts
addPolygons(
data = districts,
color = 'black',
weight = 6,
opacity = 2,
fillColor = 'white',
#fillColor =  ~district_palette(District),
fillOpacity = 0.5,
label = ~District,
labelOptions = labelOptions(noHide = TRUE)
) %>%
# Precincts with mayoral results
addPolygons(
color = 'black',
weight = 0.5,
opacity = 0.8,
fillColor = ~WinnerColor,
fillOpacity = 1,
popup = ~paste(
"<strong>Precinct:</strong>", NAME, "<br><br>",
"<strong>Winning Candidate:</strong> ", Winner, "<br>",
"<strong>Max Vote Share:</strong> ", round(MaxVoteShare, 1), "%", "<br><br>",
"<strong>All Results:</strong><br>", Results
),
highlight=highlightOptions(
color = 'red',
weight = 2,
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~NAME,
labelOptions = labelOptions(
style = list('color' = 'black', 'font-weight'='bold',
'background-color' = 'white',
'padding' = '5px',
'border-radius'= '3px',
'box-shadow' = '3px 3px rgba(0,0,0,0.25'),
textOnly = TRUE,
direction = 'right',
opacity = 0.9
),
options = pathOptions(
cursor = 'pointer'
)
) %>%
addLegend(
"bottomright",
pal = winner_palette_mayor,
values = unique(filteredMayorData()$Winner),
title = "Winning Candidate",
opacity = 1
)
})
# Render Council Map
observe({
print("Filtered Council Data:")
print(filteredCouncilData())
})
output$councilMap <- renderLeaflet({
# Join filtered data with precinct shapefile
map_data_council <- precincts %>%
left_join(filteredCouncilData(), by=c("NAME" = "Precinct"))%>%
mutate(
District.x = as.numeric(District.x),
District.y = as.numeric(District.y),
District = coalesce(District.x, District.y)) %>%
select(-District.x, District.y) %>%
filter(!is.na(WinnerColor))
print("Map Data for Council:")
print(head(map_data_council))
print(names(map_data_council))
# Ensure District column exists
if (!"District" %in% names(map_data_council)) {
stop("District column missing in map_data_council after the join!")
}
leaflet(data = map_data_council) %>%
addTiles() %>%
setView(lng = -98.4936,
lat = 29.4241,
zoom = 11) %>%
# City Council Districts
addPolygons(
data = districts,
color = 'black',
weight = 1,
opacity = 1,
fillColor = 'white',
#fillColor =  ~district_palette(District),
fillOpacity = 1,
label = ~District,
labelOptions = labelOptions(noHide = TRUE)
) %>%
# Precincts with council results
addPolygons(
color = 'black',
weight = 0.5,
opacity = 0.8,
fillColor = ~WinnerColor,
fillOpacity = 0.7,
popup = ~paste(
"<strong>District:</strong>", District, "<br>",
"<strong>Precinct:</strong>", NAME, "<br><br>",
"<strong>Winning Candidate:</strong> ", Winner, "<br>",
"<strong>Max Vote Share:</strong> ", round(MaxVoteShare, 1), "%", "<br><br>",
"<strong>All Results:</strong><br>", Results
),
highlight=highlightOptions(
color = 'red',
weight = 2,
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~NAME,
labelOptions = labelOptions(
style = list('color' = 'black', 'font-weight'='bold',
'background-color' = 'white',
'padding' = '5px',
'border-radius'= '3px',
'box-shadow' = '3px 3px rgba(0,0,0,0.25'),
textOnly = TRUE,
direction = 'right',
opacity = 0.9
),
options = pathOptions(
cursor = 'pointer'
)
) %>%
addLegend(
"bottomright",
pal = winner_palette,
values = unique(filteredCouncilData()$Winner),
title = "Winning Candidates",
opacity = 1
)
})
}
shinyApp(ui, server)
## Server ##
server <- function(input, output, session) {
# Reactive data for Mayor's map
filteredMayorData <- reactive({
data <- mayor_results %>%
filter(ElectionYear == input$electionYear)
if (input$mayorDistrict != "All") {
valid_precincts <- precincts %>%
filter(District == as.numeric(input$mayorDistrict)) %>%
pull(NAME)
data <- data %>%
filter(Precinct %in% valid_precincts)
}
data
})
# Reactive data for Council map
filteredCouncilData <- reactive({
council_data <- council_results %>%
filter(ElectionYear == input$electionYear)
if (input$councilDistrict != "All") {
council_data <- council_data %>%
filter(District == as.numeric(input$councilDistrict))
}
council_data
})
observe({
print("Filtered Council Data:")
print(filteredCouncilData())
})
# Render Mayoral Map
output$mayorMap <- renderLeaflet({
# Join filtered data with precinct shapefile
map_data <- precincts %>%
left_join(filteredMayorData(), by=c("NAME" = "Precinct"))%>%
filter(!is.na(WinnerColor))
leaflet(data=map_data) %>%
addTiles() %>%
setView(lng = -98.4936,
lat = 29.4241,
zoom = 11) %>%
# City Council Districts
addPolygons(
data = districts,
color = 'black',
weight = 1,
opacity = 1,
fillColor = 'white',
#fillColor =  ~district_palette(District),
fillOpacity = 0.5,
label = ~District,
labelOptions = labelOptions(noHide = TRUE)
) %>%
# Precincts with mayoral results
addPolygons(
color = 'black',
weight = 1,
opacity = 1,
fillColor = ~WinnerColor,
fillOpacity = 1,
popup = ~paste(
"<strong>Precinct:</strong>", NAME, "<br><br>",
"<strong>Winning Candidate:</strong> ", Winner, "<br>",
"<strong>Max Vote Share:</strong> ", round(MaxVoteShare, 1), "%", "<br><br>",
"<strong>All Results:</strong><br>", Results
),
highlight=highlightOptions(
color = 'red',
weight = 2,
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~NAME,
labelOptions = labelOptions(
style = list('color' = 'black', 'font-weight'='bold',
'background-color' = 'white',
'padding' = '5px',
'border-radius'= '3px',
'box-shadow' = '3px 3px rgba(0,0,0,0.25'),
textOnly = TRUE,
direction = 'right',
opacity = 0.9
),
options = pathOptions(
cursor = 'pointer'
)
) %>%
addLegend(
"bottomright",
pal = winner_palette_mayor,
values = unique(filteredMayorData()$Winner),
title = "Winning Candidate",
opacity = 1
)
})
# Render Council Map
observe({
print("Filtered Council Data:")
print(filteredCouncilData())
})
output$councilMap <- renderLeaflet({
# Join filtered data with precinct shapefile
map_data_council <- precincts %>%
left_join(filteredCouncilData(), by=c("NAME" = "Precinct"))%>%
mutate(
District.x = as.numeric(District.x),
District.y = as.numeric(District.y),
District = coalesce(District.x, District.y)) %>%
select(-District.x, District.y) %>%
filter(!is.na(WinnerColor))
print("Map Data for Council:")
print(head(map_data_council))
print(names(map_data_council))
# Ensure District column exists
if (!"District" %in% names(map_data_council)) {
stop("District column missing in map_data_council after the join!")
}
leaflet(data = map_data_council) %>%
addTiles() %>%
setView(lng = -98.4936,
lat = 29.4241,
zoom = 11) %>%
# City Council Districts
addPolygons(
data = districts,
color = 'black',
weight = 1,
opacity = 1,
fillColor = 'white',
#fillColor =  ~district_palette(District),
fillOpacity = 1,
label = ~District,
labelOptions = labelOptions(noHide = TRUE)
) %>%
# Precincts with council results
addPolygons(
color = 'black',
weight = 1,
opacity = 1,
fillColor = ~WinnerColor,
fillOpacity = 0.7,
popup = ~paste(
"<strong>District:</strong>", District, "<br>",
"<strong>Precinct:</strong>", NAME, "<br><br>",
"<strong>Winning Candidate:</strong> ", Winner, "<br>",
"<strong>Max Vote Share:</strong> ", round(MaxVoteShare, 1), "%", "<br><br>",
"<strong>All Results:</strong><br>", Results
),
highlight=highlightOptions(
color = 'red',
weight = 2,
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~NAME,
labelOptions = labelOptions(
style = list('color' = 'black', 'font-weight'='bold',
'background-color' = 'white',
'padding' = '5px',
'border-radius'= '3px',
'box-shadow' = '3px 3px rgba(0,0,0,0.25'),
textOnly = TRUE,
direction = 'right',
opacity = 0.9
),
options = pathOptions(
cursor = 'pointer'
)
) %>%
addLegend(
"bottomright",
pal = winner_palette,
values = unique(filteredCouncilData()$Winner),
title = "Winning Candidates",
opacity = 1
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
library(rsconnect)
getwd()
rsconnect::setAccountInfo(name='jturek', token='5B959F74AB1C3EE37DDCDF4142E3D0C5', secret='PQhk3J2Q21nJ2ZZInFypyNOBSc8QAV3b/++T4i7u')
setwd("/Users/jackturek/Documents/Repos/COSA-Elections/app")
rsconnect::deployApp()
rsconnect::deployApp()
rlang::last_trace()
rsconnect::deployApp(appName = "san-antonio-elections")
rsconnect::deployApp(appName = "san-antonio-elections", streaming=TRUE)
rsconnect::deployApp(appName = "san-antonio-elections")
