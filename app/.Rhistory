),
options = pathOptions(
cursor = 'pointer'
)
) %>%
addLegend(
"bottomright",
pal = mayoral_palette,
values = unique(filteredMayorData()$Winner),
title = "Winning Candidate",
opacity = 1
)
})
# Render Council Map
output$councilMap <- renderLeaflet({
# Join filtered data with precinct shapefile
map_data_council <- precincts %>%
left_join(filteredCouncilData(), by=c("NAME" = "Precinct"))%>%
mutate(
District.x = as.numeric(District.x),
District.y = as.numeric(District.y),
District = coalesce(District.x, District.y)) %>%
select(-District.x, District.y) %>%
filter(!is.na(WinnerColor))
# Prepare legend labels with precincts won
legend_data <- filteredCouncilData() %>%
group_by(District, Winner) %>%
summarise(PrecinctsWon = n(), .groups = "drop") %>%
left_join(
filteredCouncilData() %>%
group_by(District) %>%
summarise(TotalPrecincts = n_distinct(Precinct), .groups = "drop"),
by = "District"
) %>%
mutate(Label = paste0(Winner, " (", PrecinctsWon, "/", TotalPrecincts, " precincts won)"))
leaflet(data = map_data_council) %>%
addTiles() %>%
setView(lng = -98.4936,
lat = 29.4241,
zoom = 11) %>%
# City Council Districts
addPolygons(
data = districts,
color = 'black',
weight = 1,
opacity = 1,
fillColor = 'white',
#fillColor =  ~district_palette(District),
fillOpacity = 0.2,
label = ~District,
labelOptions = labelOptions(noHide = TRUE)
) %>%
# Precincts with council results
addPolygons(
color = 'black',
weight = 1,
opacity = 1,
fillColor = ~WinnerColor,
fillOpacity = 0.7,
popup = ~paste(
"<strong>District:</strong>", District, "<br>",
"<strong>Precinct:</strong>", NAME, "<br><br>",
"<strong>Winning Candidate:</strong> ", Winner, "<br>",
"<strong>Max Vote Share:</strong> ", round(MaxVoteShare, 1), "%", "<br><br>",
"<strong>All Results:</strong><br>", Results
),
highlight=highlightOptions(
color = 'red',
weight = 2,
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~NAME,
labelOptions = labelOptions(
style = list('color' = 'black', 'font-weight'='bold',
'background-color' = 'white',
'padding' = '5px',
'border-radius'= '3px',
'box-shadow' = '3px 3px rgba(0,0,0,0.25'),
textOnly = TRUE,
direction = 'right',
opacity = 0.9
),
options = pathOptions(
cursor = 'pointer'
)
) %>%
addControl(
html = createCustomLegend(legend_data),
position = "bottomright")
})
# Voter Turnout Map
output$turnoutMap <- renderLeaflet({
leaflet(data = filteredTurnoutData()) %>%
addTiles() %>%
setView(lng = -98.4936,
lat = 29.4241,
zoom = 11) %>%
# City Council Districts
addPolygons(
data = districts,
color = 'black',
weight = 1,
opacity = 1,
fillColor = 'white',
#fillColor =  ~district_palette(District),
fillOpacity = 0.2,
label = ~District,
labelOptions = labelOptions(noHide = TRUE)
) %>%
# Precinct Turnout
addPolygons(
color = 'black',
weight = 1,
opacity = 1,
fillColor = ~turnout_palette(`Voter Turnout (%)`),
fillOpacity = 0.7,
popup = ~paste(
"<strong>Precinct:</strong>", NAME, "<br>",
"<strong>Turnout Percentage:</strong>", round(`Voter Turnout (%)`*100,1), "%", "<br>",
"<strong>Registered Voters:</strong>", scales::comma(`Registered Voters`), "<br>",
"<strong>Total Votes:</strong>", scales::comma(`Ballots Cast`)
),
highlight = highlightOptions(
color = 'red',
weight = 2,
bringToFront = TRUE
),
label = ~NAME,
labelOptions = labelOptions(
style = list('color' = 'black', 'font-weight'='bold',
'background-color' = 'white',
'padding' = '5px',
'border-radius'= '3px',
'box-shadow' = '3px 3px rgba(0,0,0,0.25'),
textOnly = TRUE,
direction = 'right',
opacity = 0.9
),
) %>%
addLegend(
pal = turnout_palette,
values = precincts_turnout$`Voter Turnout (%)`,
position = 'bottomright',
title = "Voter Turnout",
labFormat = labelFormat(transform = function(x) round(x * 100,1), suffix = '%')
)
})
# Check if the selected district had a runoff election
runoffMessage <- reactive({
selected_district <- input$councilDistrict
selected_year <- input$electionYear
# Filter runoff data for the selected district and year
has_runoff <- council_results %>%
filter(
ElectionType == "Runoff",
ElectionYear == selected_year,
District == as.numeric(selected_district)
) %>%
nrow() > 0
if (!has_runoff) {
paste("District", selected_district, "did not have a runoff election in", selected_year)
} else {
NULL
}
})
# Render the message
output$runoffMessage <- renderUI({
message <- runoffMessage()
if (!is.null(message)) {
div(
style = "color: red; font-weight: bold; margin-top: 10px;",
message
)
}
})
# Custom HTML legend function
createCustomLegend <- function(legend_data) {
html <- '<div style="background: white; padding: 10px; border-radius: 5px;">'
html <- paste0(html, '<strong>Winning Candidates:</strong><br>')
for (i in seq_len(nrow(legend_data))) {
html <- paste0(html,
'<div style="display: flex; align-items: center;">',
'<div style="width: 10px; height: 10px; background-color:',
council_palette(legend_data$Winner[i]), '; margin-right: 5px;"></div>',
legend_data$Label[i], '</div>')
}
html <- paste0(html, '</div>')
return(html)
}
}
shinyApp(ui, server)
rsconnect::deployApp(appName = "san-antonio-elections-v2", forceUpdate = TRUE)
runApp()
rsconnect::deployApp(appName = "san-antonio-elections-v2", forceUpdate = TRUE)
rsconnect::deployApp(appName = "san-antonio-elections-v2", forceUpdate = TRUE)
rsconnect::deployApp(appName = "san-antonio-elections-v2", forceUpdate = TRUE)
districts_old <- st_read('CouncilDistricts.shp') %>%
st_transform(crs = 4326)
districts_old <- districts_old %>% arrange(as.numeric(District))
# Load election data
may2021election <- read_csv('may2021general_cleaned.csv') %>%
mutate(ElectionYear = 2021, ElectionType = "General")
View(may2021election)
june2021runoff <- read_csv('june2021runoff_cleaned.csv') %>%
mutate(ElectionYear = 2021, ElectionType = "Runoff")
View(june2021runoff)
# Combine election datasets
all_elections <- bind_rows(may2023election, june2023runoff, may2021election, june2021runoff)
View(all_elections)
all_elections <- all_elections %>%
mutate(`Total Votes` = replace_na(`Total Votes`, 0),
`Vote Percentage` = replace_na(`Vote Percentage`, 0))
# Voter turnout
voter_turnout2021_general <- read_csv('voter_turnout2021general.csv')
View(voter_turnout2021_general)
voter_turnout2023_general <- read_csv('voter_turnout2023.csv')
View(voter_turnout2023_general)
voter_turnout2021_general <- voter_turnout2021_general %>%
mutate(`Voter Turnout (%)` = as.numeric(gsub("%", "", `Voter Turnout (%)`)) /100,
ElectionYear = 2021, ElectionType = "General")
View(voter_turnout2021_general)
voter_turnout2023_general <- voter_turnout2023_general %>%
mutate(`Voter Turnout (%)` = as.numeric(gsub("%", "", `Voter Turnout (%)`)) /100,
ElectionYear = 2023, ElectionType = "General")
View(voter_turnout2023_general)
voter_turnout2023_general <- read_csv('voter_turnout2023.csv')
voter_turnout2023_general <- voter_turnout2023_general %>%
mutate(`Voter Turnout (%)` = as.numeric(gsub("%", "", `Voter Turnout (%)`)) /100,
ElectionYear = 2023, ElectionType = "General")
View(voter_turnout2023_general)
voter_turnout2021_runoff <- read_csv('voter_turnout2021runoff.csv')
voter_turnout2021_runoff <- voter_turnout2021_runoff %>%
mutate(`Voter Turnout (%)` = as.numeric(gsub("%", "", `Voter Turnout (%)`)) /100,
ElectionYear = 2021, ElectionType = "Runoff")
voter_turnout2023_runoff <- read_csv('voter_turnout2023runoff.csv')
View(voter_turnout2023_runoff)
voter_turnout2023_runoff <- voter_turnout2023_runoff %>%
mutate(`Voter Turnout (%)` = as.numeric(gsub("%", "", `Voter Turnout (%)`)) /100,
ElectionYear = 2023, ElectionType = "Runoff")
View(voter_turnout2023_runoff)
# Combine voter turnout datasets
all_voter_turnout <- bind_rows(voter_turnout2023_general, voter_turnout2023_runoff,
voter_turnout2021_general, voter_turnout2021_runoff)
# Reactive selection of district shapefiles
selected_districts <- reactive({
if (input$electionYear == 2021) {
districts_2021
} else if (input$electionYear == 2023) {
districts_2023
} else {
NULL
}
})
# Reactive precincts with district spatial join
precincts_with_districts <- reactive({
st_join(precincts, selected_districts()[, 'District']) %>%
filter(!is.na(District))
})
# Create a color palette for voter turnout
turnout_palette <- colorNumeric(
palette = c("blue", "lightblue", "yellow", "orange", "red"),
domain = precincts_turnout$`Voter Turnout (%)`,
na.color = "transparent"
)
# Aggregate Mayor's race results
mayor_results <- all_elections %>%
filter(Race == 'Mayor') %>%
group_by(Precinct, ElectionYear, ElectionType) %>%
summarise(
Results = paste(
Candidate, ": ", `Total Votes`, " votes (",
round(`Vote Percentage`, 1), "%)",
collapse = "<br>"
),
MaxVoteShare = max(`Vote Percentage`, na.rm = TRUE),
Winner = Candidate[which.max(`Vote Percentage`)],
.groups = 'drop'
)
mayoral_winners = unique(mayor_results$Winner)
# Mayoral palette
mayoral_palette <- colorFactor(
palette = brewer.pal(min(length(mayoral_winners), 12), "Set3"),
domain = mayoral_winners
)
mayor_results <- mayor_results %>%
mutate(WinnerColor = mayoral_palette(Winner))
#Aggregate City Council results
council_results <- all_elections %>%
filter(str_detect(Race, 'District')) %>%
mutate(
District = as.numeric(str_extract(Race, "\\d+"))
) %>%
group_by(Precinct, District, ElectionYear, ElectionType) %>%
summarise(
Results = paste(
Candidate, ": ", `Total Votes`, " votes (",
round(`Vote Percentage`, 1), "%)",
collapse = "<br>"
),
MaxVoteShare = max(`Vote Percentage`, na.rm = TRUE),
Winner = Candidate[which.max(`Vote Percentage`)],
.groups = 'drop'
)
council_winners <- unique(council_results$Winner)
# Council Palette
council_palette <- colorFactor(
palette = brewer.pal(min(length(council_winners),12), "Set3"),
domain = council_winners
)
council_results <- council_results %>%
mutate(WinnerColor = council_palette(Winner))
# Voter turnout
valid_precincts <- unique(mayor_results$Precinct)
all_voter_turnout <- all_voter_turnout %>%
filter(Precinct %in% valid_precincts)
runApp()
runApp()
runApp()
# Reactive precincts with district spatial join
precincts_with_districts <- reactive({
req(selected_districts()) # Ensure selected_districts() is available
precincts %>%
st_join(selected_districts()[, 'District']) %>%
filter(!is.na(District))
})
runApp()
runApp()
# Reactive selection of district shapefiles
selected_districts <- reactive({
req(input$electionYear) # Ensure input$electionYear is available
if (input$electionYear == 2021) {
districts_old
} else if (input$electionYear == 2023) {
districts
} else {
NULL
}
})
# Reactive precincts with district spatial join
precincts_with_districts <- reactive({
req(selected_districts()) # Ensure selected_districts() is available
precincts %>%
st_join(selected_districts()[, 'District']) %>%
filter(!is.na(District))
})
shinyApp(ui, server)
##########################################################################################
## UI ##
ui <- dashboardPage(
dashboardHeader(title = tags$div(
style = "white-space: nowrap; overflow: visible; text-overflow: clip;",
"San Antonio Municipal Elections"
), titleWidth = 400),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Mayoral Elections", tabName = "mayor", icon = icon("user-tie")),
menuItem("City Council Elections", tabName = "council", icon = icon("users")),
menuItem("Voter Turnout", tabName = "turnout", icon = icon("chart-bar")),
selectInput("electionYear", "Select Election Year:",
choices = unique(all_elections$ElectionYear), selected = 2023),
selectInput("electionType", "Select Election Type:",
choices = unique(all_elections$ElectionType), selected = "General"),
conditionalPanel(
condition = "input.tabs == 'council'",
selectInput("councilDistrict", "Select Council District:",
choices = c("All", sort(unique(council_results$District))),
selected = "All")
)
)
),
dashboardBody(
tabItems(
# Mayoral Race Tab
tabItem(
tabName = "mayor",
fluidRow(
box(
title = "Mayoral Election Results",
status = "primary",
solidHeader = TRUE,
width = 12,
leafletOutput("mayorMap", height = 600)
)
),
fluidRow(
box(
title = "Mayoral Race Candidate Vote Share",
status = "info",
solidHeader = TRUE,
width = 12,
dataTableOutput("mayorTable")
)
)
),
# Council Results Tab
tabItem(
tabName = "council",
fluidRow(
box(
title = "City Council Election Results",
status = "primary",
solidHeader = TRUE,
width = 12,
leafletOutput("councilMap", height = 600)
)
),
fluidRow(
box(
title = "City Council Candidate Vote Share",
status = "info",
solidHeader = TRUE,
width = 12,
dataTableOutput("councilTable")
)
)
)
)
)
)
######################################################################################
## Server ##
server <- function(input, output, session) {
# Mayor's Table
filteredMayorTableData <- reactive({
mayor_data <- all_elections %>%
filter(Race == 'Mayor', ElectionYear == input$electionYear, ElectionType == input$electionType) %>%
group_by(Candidate) %>%
summarise(
`Total Votes` = sum(`Total Votes`, na.rm = TRUE),
.groups = "drop"
)
total_votes_all_candidates <- sum(mayor_data$`Total Votes`, na.rm=TRUE)
mayor_data <- mayor_data %>%
mutate(`Vote Share` = `Total Votes` / total_votes_all_candidates*100) %>%
arrange(desc(`Total Votes`))
mayor_data
})
# Council Table
filteredCouncilTableData <- reactive({
council_data <- all_elections %>%
filter(str_detect(Race, "District"), ElectionYear == input$electionYear, ElectionType == input$electionType) %>%
mutate(
District = as.numeric(str_extract(Race, "\\d+"))
)
# Apply district filter
if (input$councilDistrict != "All") {
council_data <- council_data %>%
filter(District == as.numeric(input$councilDistrict))
}
# Aggregate votes and calculate vote share
council_table <- council_data %>%
group_by(Candidate) %>%
summarise(
`Total Votes` = sum(`Total Votes`, na.rm = TRUE),
.groups = "drop"
)
total_votes_all_candidates <- sum(council_table$`Total Votes`, na.rm = TRUE)
council_table <- council_table %>%
mutate(`Vote Share` = `Total Votes` / total_votes_all_candidates*100) %>%
arrange(desc(`Total Votes`))
council_table
})
# Render Mayoral Table
output$mayorTable <- renderDataTable({
filteredMayorTableData() %>%
mutate(
`Total Votes` = scales::comma(`Total Votes`),
`Vote Share` = scales::percent(`Vote Share`/100)
)
})
# Render Council Table
output$councilTable <- renderDataTable({
filteredCouncilTableData() %>%
mutate(
`Total Votes` = scales::comma(`Total Votes`),
`Vote Share` = scales::percent(`Vote Share`/100)
)
})
# Render Mayoral Map
output$mayorMap <- renderLeaflet({
req(precincts_with_districts(), filteredMayorTableData())
map_data <- precincts_with_districts() %>%
left_join(filteredMayorTableData(), by = c("NAME" = "Precinct")) %>%
filter(!is.na(WinnerColor))
leaflet(data=map_data) %>%
addTiles() %>%
setView(lng = -98.4936, lat = 29.4241, zoom = 11) %>%
addPolygons(
color = 'black', weight = 1, fillColor = ~WinnerColor,
fillOpacity = 0.7, label = ~paste("Precinct:", NAME)
) %>%
addLegend(
"bottomright", pal = mayoral_palette, values = map_data$Winner,
title = "Winning Candidate")
})
# Render Council Map
output$councilMap <- renderLeaflet({
req(precincts_with_districts(), filteredCouncilTableData())
map_data <- precincts_with_districts() %>%
left_join(filteredCouncilTableData(), by = c("NAME" = "Precinct"))
leaflet(data=map_data) %>%
addTiles() %>%
setView(lng = -98.4936, lat = 29.4241, zoom = 11) %>%
addPolygons(
color = 'black', weight = 1, fillColor = ~WinnerColor,
fillOpacity = 0.7, label = ~paste("Precinct:", NAME)
)
})
}
shinyApp(ui, server)
